@inject NavigationManager navigation;
@inject IJSRuntime JSRuntime;

<div style="visibility: @(Controller.State == null ? "hidden" : "visible")" class="profile-frame">
    <div class="profile-position">
        <div class="profile-menu">
            <div class="profile-avatar">
                <img src="@Controller.State?.AvatarImageSource" />
                <h3>@Controller.State?.Name <span style ="color:dimgray">#@Controller.State?.Id</span></h3>
            </div>
            <ul>
                <li>
                    <button @onclick=OpenChat>Open Chat</button>
                </li>
                <li>
                    @if(ShouldRenderInviteButton())
                    {
                        <button @onclick=InviteFriend>Send Friend Request</button>
                    }
                    else if(ShouldRenderCancelInviteButton()) 
                    {
                        <button @onclick=InviteFriend>Cancel Invitation</button>
                    }
                </li>
                <li>
                    <button @onclick=Close>Close</button>
                </li>
            </ul>
        </div>
    </div>
</div>

    @code{
    [Parameter]
    public StateComponentController<IViewBindable> Controller { get; set; }

    protected override void OnParametersSet()
    {
        Controller.ChangeState += StateChanged;
    }

    private void StateChanged(IViewBindable? view)
    {
        RefreshContextMenu();
    }

    private void OpenChat()
    {
        if(Controller.State is null)
        {
            RefreshContextMenu();
            return;
        }

        Conversation.OpenChat(Controller.State, navigation);
    }

    private void Close()
    {
        Controller.State = null;
    }

    private void RefreshContextMenu()
    {
        InvokeAsync(StateHasChanged);
    }

    private void InviteFriend()
    {
        if(Controller.State is not null)
        {
            User user = (User)Controller.State;
            user.InviteAsFriend();
        }

        RefreshContextMenu();
    }

    private bool ShouldRenderInviteButton()
    {
        if (Controller.State is null || Controller.State.BindType == BindableType.Group 
            || Controller.State.BindType == BindableType.LocalUser)
            {
            return false;
        }

        FriendStatus friendStatus = ((User)Controller.State).UserProperties.IsFriend;

        return friendStatus != FriendStatus.Friend && friendStatus != FriendStatus.Invited;
    }

    private bool ShouldRenderCancelInviteButton() 
    {
        if (Controller.State is null || Controller.State.BindType == BindableType.Group
            || Controller.State.BindType == BindableType.LocalUser) {
            return false;
        }

        FriendStatus friendStatus = ((User)Controller.State).UserProperties.IsFriend;

        return friendStatus == FriendStatus.Invited;
    }
}
