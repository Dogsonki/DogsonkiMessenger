@inject NavigationManager navigation;
@inject IJSRuntime JSRuntime;

<div style="visibility: @(Controller.State == null ? "hidden" : "visible")" class="profile-frame">
    <div>
        <div class="profile-menu">
            <div>
                <img class="avatar" src="@Controller.State?.AvatarImageSource" />
                <div class="me">
                    <strong>@Controller.State?.Name<span style="color: dimgray">#@Controller.State?.Id</span></strong>
                </div>
            </div>

            <ul>
                <li>
                    <button @onclick=OpenChat>Open Chat</button>
                </li>
                <li>
                    @if(Controller.State is not null && ((User)Controller.State).UserProperties.IsFriend != FriendStatus.Friend)
                    {
                        <button @onclick=InviteFriend>Invite</button>
                    }
                </li>
                <li>
                    <button @onclick=Close>Close</button>
                </li>
            </ul>
        </div>
    </div>
</div>

@code{
    [Parameter]
    public StateComponentController<IViewBindable> Controller { get; set; }

    protected override void OnParametersSet()
    {
        Controller.ChangeState += StateChanged;
    }

    private void StateChanged(IViewBindable? view)
    {
        DisplayContextMenu(view != null);
    }

    private void OpenChat()
    {
        if(Controller.State is null)
        {
            DisplayContextMenu(false);
            return;
        }

        Conversation.OpenChat(Controller.State, navigation);
    }

    private void Close()
    {
        Controller.State = null;
        StateHasChanged();
    }

    private void DisplayContextMenu(bool state)
    {
        InvokeAsync(StateHasChanged);
    }

    private void InviteFriend()
    {
        if(Controller.State is null || Controller.State?.BindType == BindableType.Group)
        {
            return;
        }

        SocketCore.Send($"{Controller.State.Id}", Token.SEND_USER_FRIEND_INVITE, true);

        User user = (User)Controller.State;

        user.UserProperties.IsFriend = FriendStatus.Invited;

        InvokeAsync(StateHasChanged);
    }

    private bool ShouldRenderInviteButton()
    {
        if (Controller.State is null || Controller.State.BindType == BindableType.Group)
        {
            return false;
        }

        User user = (User)Controller.State;

        return user.UserProperties.IsFriend == FriendStatus.None;
    }
}
