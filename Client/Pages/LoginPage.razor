@page "/"
@page "/login/{info}"

@inject NavigationManager navigation;

@using Client.IO.Models.Offline;
@using Client.Models;
@using Client.Networking.Core;
@using Client.Networking.Packets;
@using Client.Networking.Models;
@using Client.IO;
@using Client.Pages.Components;
@using Newtonsoft.Json;

<div class="form-container">
    <h1>Welcome to Dogsonki</h1>
    <span style="color: #ffffff99">Log In with your email and password</span>
    <span style="color:white">@Info</span>

    <input @bind="emailInput" type="email" placeholder="Email"/>
    <input @bind="passwordInput" type="password" placeholder="Password" />

    <button @onclick="TryLogin">Login</button>
</div>

<div style="text-align:center">
    <span style="color:red">@errorMessage</span>
    <p style="color:cornflowerblue; padding-top: 10px"> <a href="/ForgotPassword"> Forgot Your Password? </a> </p>
    <p style="color:cornflowerblue"> <a href="/RegisterPage"> Sign up </a> </p>
</div>

@code {

    [Parameter]
    public string? Info{ get; set; }

    private string? emailInput;
    private string? passwordInput;
    private bool rememberMeInput = true;

    private string? errorMessage;

    public LoginPage()
    {
        if (!LocalUser.IsLoggedIn)
        {
            SocketCore.OnConnectionConnected((connected) =>
            {
                if (connected)
                {
                    Session.Init(LoginBySession);
                }
                else
                {
                    LoginWithOfflineMode();
                }
            });
        }
    }

    protected override void OnInitialized()
    {
        if (LocalUser.IsLoggedIn || LocalUser.IsInOfflineMode)
        {
            navigation.NavigateTo("/MainPage");
        }
    }

    private void LoginWithOfflineMode()
    {
        string? cachedLocalUser = Cache.ReadFileCache(nameof(LocalUserCache));

        if (!string.IsNullOrEmpty(cachedLocalUser))
        {
            LocalUserCache? localUser = JsonConvert.DeserializeObject<LocalUserCache>(cachedLocalUser);

            if(localUser is not null)
            {
                new LocalUser(localUser.UserName, localUser.UserId, true);
            }
            else
            {
                errorMessage = "Can't Connect To Server";
            }
        }
    }

    private void LoginBySession(SocketPacket packet)
    {
        LoginCallbackPacket? login = packet.Deserialize<LoginCallbackPacket?>();

        if (login is null)
            return;

        if (login.Token == 1)
        {
            new LocalUser(login.Username, login.Id);
            navigation.NavigateTo("/MainPage", false, true);
        }
    }

    private void TryLogin()
    {
        if (string.IsNullOrEmpty(emailInput) || string.IsNullOrEmpty(passwordInput))
        {
            errorMessage = "Email or password was empty";
            return;
        }

        LoginPacket packet = new LoginPacket(emailInput, passwordInput, true);

        if (!SocketCore.SendCallback(packet, Token.LOGIN, LoginCallback))
            errorMessage = "Can't Connect to Server";
        else
            errorMessage = "";

        StateHasChanged();
    }

    private void LoginCallback(SocketPacket callbackPacket)
    {
        LoginCallbackPacket? packet = callbackPacket.Deserialize<LoginCallbackPacket>();

        if(packet is null)
        {
            errorMessage = callbackPacket.PacketError;
            return;
        }

        InvokeAsync(() =>
        {
            switch (packet.Token)
            {
                case 0:
                    errorMessage = "Wrong email or password";
                    break;
                case 1:
                    new LocalUser(packet.Username, packet.Id);
                    navigation.NavigateTo("/MainPage");
                    break;
                case -1:
                    errorMessage = "User is banned";
                    break;
                default:
                    errorMessage = $"Unhandled error {packet.Token}";
                    break;
            }

            StateHasChanged();
        });
    }

    private void CheckmarkClicked()
    {
        if (rememberMeInput)
            rememberMeInput = false;
        else
            rememberMeInput = true;
    }
}