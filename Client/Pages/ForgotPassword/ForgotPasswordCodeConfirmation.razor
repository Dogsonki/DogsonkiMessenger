@page "/ForgotPasswordCodeConfirmation/{email}";

@inject NavigationManager navigation;

@using Client.Networking.Core;
@using Client.Networking.Packets;
@using Client.Networking.Models;

<div style="text-align:center">
    <h1> Confirm your account </h1>

    <span>We just sent you a confirmation code over to @Email</span>

    <input maxlength="5" type="number" pattern="\d*" @bind="codeInput" placeholder="Code" />

    @if (!IsOnCooldown)
    {
        <span> Didn't get a code? <span @onclick=ResendCode style="color: rgb(110, 192, 255)">Click to resend </span></span>
    }
    else
    {
        <span> Wait @(60 - @ElapsedTime) to resend code again</span>
    }

    <button @onclick="TrySendCode">Confirm</button>
    <span style="color:red">@errorMessage</span>

</div>

@code {
    private const int MaxAttempts = 5;
    private int CurrentAttempt = 0;

    private bool IsOnCooldown = false;

    private Timer timer;

    [Parameter]
    public string? Email { get; set; }

    private const int MAX_CODE_ATTEMPTS = 5;

    private string? codeInput;

    private string? errorMessage;

    private int checkAttempts = 0;

    private int _elapsedTime = 0;
    private int ElapsedTime
    {
        get => _elapsedTime;
        set
        {
            _elapsedTime = value;
        }
    }

    protected override void OnInitialized()
    {
        timer = new Timer(async _ =>
        {
            if (IsOnCooldown)
            {
                ElapsedTime++;
                if (_elapsedTime == 60)
                {
                    IsOnCooldown = false;
                }
                await InvokeAsync(StateHasChanged);
            }
        }, null, 0, 1000);
    }

    private void TrySendCode()
    {
        if (string.IsNullOrEmpty(codeInput))
        {
            errorMessage = "Code was empty";
            return;
        }

        if (codeInput.Length != 5)
        {
            errorMessage = "Code length have to be 5";
            return;
        }

        if (!SocketCore.SendCallback(int.Parse(codeInput), Token.PASSWORD_FORGOT, CodeConfirmationCallback, true))
        {
            errorMessage = "Unable to connect to the server";
            return;
        }
    }

    private void CodeConfirmationCallback(SocketPacket packet)
    {
        checkAttempts++;

        int token = packet.ToInt();
        string info = string.Empty;
        Debug.Write($"register token: {token}");
        InvokeAsync(() =>
        {
            switch (token)
            {
                case 5:
                    navigation.NavigateTo("/PasswordChangeForm/");
                    break;
                case 9:
                    errorMessage = $"Wrong code. Attempts left: {MAX_CODE_ATTEMPTS - checkAttempts}";
                    break;
                case 10:
                    info = "You have used all attempts to confirm your account. \n Please try again later";
                    navigation.NavigateTo("/login/" + info);
                    break;
            }
            StateHasChanged();
        });
    }

    private void ResendCode()
    {
        ElapsedTime = 0;
        IsOnCooldown = true;

        StateHasChanged();

        SocketCore.Send("a", Token.PASSWORD_FORGOT);
    }
}
