@page "/ForgotPassword";

@inject NavigationManager navigation;

@using Client.Networking.Core;
@using Client.Networking.Packets;
@using Client.Networking.Models;

<div class="form-container">
    <h1>Forgot Password</h1>

    <span>Enter email associated with your account</span>

    <input @bind="emailInput" type="email" placeholder="Email" />

    <button @onclick="TryRecover">Send</button>
</div>

<div style="text-align:center">
    <span style="color:red">@errorMessage</span>
    <p style="color:cornflowerblue"> <a href="/">Back to Log In</a> </p>
</div>

@code {
    private string? emailInput;
    private string? errorMessage;

    private void TryRecover()
    {
        if (string.IsNullOrEmpty(emailInput))
        {
            errorMessage = "Email cannot be null";
            return;
        }
        navigation.NavigateTo("/ForgotPasswordCodeConfirmation/" + emailInput);
        return;
        if (!SocketCore.SendCallback(emailInput, Token.PASSWORD_FORGOT, ForgotPasswordCallback, true))
        {
            errorMessage = "Unable to connect to the server";
            return;
        }
    }

    private void ForgotPasswordCallback(SocketPacket packet)
    {
        int token = packet.ToInt();

        InvokeAsync(() =>
        {
            switch (token)
            {
                case 1:
                    errorMessage = "We couldn't send you an email. Please try again later";
                    break;
                case 2:
                    errorMessage = "Account with given email dose not exists";
                    break;
                case 4:
                    navigation.NavigateTo("/ForgotPasswordCodeConfirmation/" + emailInput);
                    break;
                default:
                    errorMessage = $"Unhandled error {token}";
                    break;
            }
            StateHasChanged();
        });
    }
}
